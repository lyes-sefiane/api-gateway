# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# A sample workflow which checks out the code, builds a container
# image using Docker and scans that image for vulnerabilities using
# Snyk. The results are then uploaded to GitHub Security Code Scanning
#
# For more examples, including how to limit scans to only high-severity
# issues, monitor images for newly disclosed vulnerabilities in Snyk and
# fail PR checks for new vulnerabilities, see https://github.com/snyk/actions/

name: Docker Build & Publish

on:
  push:
    branches: ["main", "develop"]
  release:
    types:
      - published

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  BRANCH_TAG: ${{ github.head_ref || github.ref_name }}
  LATEST_TAG: latest
  SHA_TAG: sha-${{ github.sha }}

jobs:
  snyk-maven-analysis:
    permissions:
      contents: read
      security-events: write
      actions: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven-3-jdk-17@master
        continue-on-error: false
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
  maven-build:
    runs-on: ubuntu-latest
    needs: [snyk-maven-analysis]
    steps:
      - name: Checkout on API-Gateway Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build With Maven
        run: mvn clean install -DskipTests

      - name: Upload 'api-gateway.jar' Artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-gateway
          path: target/api-gateway.jar
          compression-level: 0
          overwrite: true

  docker-build:
    runs-on: ubuntu-latest
    needs: [maven-build]
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout on API-Gateway Repository
        uses: actions/checkout@v4

      - name: Create 'target' Folder
        run: mkdir target

      - name: Download 'api-gateway.jar' Artefact
        uses: actions/download-artifact@v4
        with:
          name: api-gateway
          path: target

      - name: Display Structure Of Downloaded Files
        run: ls -R target

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Build Docker Image
        run: docker build . -t  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{env.BRANCH_TAG}}

      - name: Save Docker Image
        run: docker save --output image.tar ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{env.BRANCH_TAG}}

      - name: Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar
          retention-days: 0
          overwrite: true

  snyk-docker-analysis:
    permissions:
      contents: read
      security-events: write
      actions: read
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:

      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load --input image.tar

      - name: Run Snyk to Check Docker Image For Vulnerabilities
        continue-on-error: false
        uses: snyk/actions/docker@14818c4695ecc4045f33c9cee9e795a788711ca4
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{env.BRANCH_TAG}}
          args: --severity-threshold=critical

  docker-publish:
    runs-on: ubuntu-latest
    needs: [snyk-docker-analysis]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load Docker Image
        run: docker load --input image.tar

      - name: Log Into DockerHub Registry
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Add Latest Tag For Published Release Only
        if: github.event.action == 'published'
        run: | 
          docker image tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{env.BRANCH_TAG}} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST_TAG }}
          docker image tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{env.BRANCH_TAG}} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.SHA_TAG }}

      - name: Push Images
        run: docker push -a ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Docker System Prune
        run: docker system prune --force

      - name: Logout From DockerHub Registry
        run: docker logout
